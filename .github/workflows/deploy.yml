# name: Deploy to EC2
# env:
#   AWS_DEFAULT_REGION: ap-northeast-2

# on:
#   push:
#     branches: [master]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install SSH key
#         run: |
#           echo "${{ secrets.EC2_PEM_KEY }}" | tr -d '\r' > bohumstore.pem
#           chmod 400 bohumstore.pem

#       - name: Verify SSH key creation
#         run: ls -l bohumstore.pem

#       - name: Deploy to EC2
#         run: |
#           ssh -i bohumstore.pem -o StrictHostKeyChecking=no ubuntu@3.37.112.222 'cd bohumstore && git pull && npm install && npm run build && pm2 restart bohumstore'


name: Deploy to EC2

on:
  push:
    branches:
      - master

concurrency:
  group: deploy-ec2
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write SSH key
        run: |
          echo "${{ secrets.EC2_PEM_KEY }}" > ec2.pem
          chmod 400 ec2.pem

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_PATH: ${{ secrets.EC2_PATH }}
          PM2_APP: ${{ secrets.PM2_APP }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          GH_PAT: ${{ secrets.GH_PAT }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          ssh -i ec2.pem "${EC2_USER}@${EC2_HOST}" <<EOF
            set -e

            # git / pm2가 없으면 설치
            if ! command -v git >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y git
            fi
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm i -g pm2
            fi

            mkdir -p "${EC2_PATH}"
            cd "${EC2_PATH}"

            # === 최초 세팅: .git 없으면 클론 ===
            if [ ! -d ".git" ]; then
              echo "[bootstrap] No .git -> cloning..."
              REPO_SLUG="${GITHUB_REPOSITORY}"   # 예: owner/repo
              if [ -n "${GH_PAT}" ]; then
                REPO_URL="https://${GH_PAT}@github.com/\${REPO_SLUG}.git"
              else
                REPO_URL="https://github.com/\${REPO_SLUG}.git"
              fi
              # 비어있지 않으면 안전 삭제 후 클론
              if [ "$(ls -A 2>/dev/null | wc -l)" -ne 0 ]; then
                find . -mindepth 1 -maxdepth 1 -exec rm -rf {} +
              fi
              git clone --depth 1 "\${REPO_URL}" .
            fi

            echo "[1/6] Git sync..."
            git fetch --all --prune
            git reset --hard origin/master

            echo "[2/6] Check Node/npm"
            node -v
            npm -v

            echo "[3/6] Install deps"
            npm ci --quiet || npm install --quiet

            echo "[4/6] Fix lightningcss issues (pre-build)"
            # lightningcss 문제 해결: 문제가 되는 패키지들 제거 후 재설치
            echo "Removing problematic packages..."
            npm uninstall lightningcss @tailwindcss/node @tailwindcss/postcss --silent || true
            echo "Reinstalling @tailwindcss/postcss..."
            npm install @tailwindcss/postcss --silent

            echo "[5/6] Build"
            NODE_ENV=${NODE_ENV:-production} npm run build

            echo "[6/6] PM2 reload/start"
            APP_NAME=${PM2_APP:-bohumstore}
            if pm2 describe "\$APP_NAME" >/dev/null 2>&1; then
              pm2 reload "\$APP_NAME" --update-env
            else
              pm2 start npm --name "\$APP_NAME" -- run start
            fi

            pm2 save
          EOF
